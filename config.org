#+TITLE: Config

* Пакеты
** package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src
** use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* Глобальные флаги, общие функции
** Флаги
*** Это Windows
#+begin_src emacs-lisp
  (defvar run-on-win-p (eq system-type 'windows-nt))
#+end_src
*** Mastodon
#+begin_src emacs-lisp
  (defvar load-mastodon nil)
#+end_src
*** Rclone-org
#+begin_src emacs-lisp
  (defvar load-rclone-org nil)
#+end_src
*** Elfeed
#+begin_src emacs-lisp
  (defvar me/load-elfeed-p nil)
#+end_src
** Функция исправления ошибки
#+begin_src emacs-lisp
  (defun windows-shell-encoding-config ()
    (defadvice shell (after my-shell-advice)
      (set-process-coding-system (get-buffer-process (current-buffer)) 'cp1251 'cp1251))
    (ad-activate 'shell))
#+end_src
** Функция загрузки локального конфиг файла el
#+begin_src emacs-lisp
  (defun me/load-config-file (file)
    "Загружает файл по имени"
    (let ((config-file (expand-file-name (format "%s.el" file) user-emacs-directory)))
      (when (file-exists-p config-file)
	(load-file config-file))))
#+end_src
* Оформление
** Тема
#+begin_src emacs-lisp
  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+end_src
** Скрыть меню, скролбар и тулбар
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)  
#+end_src
** Настройка шрифта
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Fira Code-10"))
#+end_src
** Отключить звуки
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
** Отключить диалоги
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src
** Упростить вопросы
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Настройка курсора
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
  (if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
#+end_src
** nya
#+begin_src emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode t))
#+end_src
* Общие настройки
** Локализация
*** Язык ввода
#+begin_src emacs-lisp
  (setq default-input-method "russian-computer")
#+end_src
*** Календарь
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
  (setq calendar-day-name-array
	["Воскресенье" "Понедельник" "Вторник"
	 "Среда" "Четверг" "Пятница" "Суббота"])
  (setq calendar-day-header-array
	["Вс" "Пн" "Вт"
	 "Ср" "Чт" "Пт" "Сб"])
  (setq calendar-day-abbrev-array
	["Вск" "Пнд" "Втр"
	 "Сре" "Чтв" "Птн" "Суб"])
  (setq calendar-month-name-array
	["Январь" "Февраль" "Март"
	 "Апрель" "Май" "Июнь"
	 "Июль" "Август" "Сентябрь"
	 "Октябрь" "Ноябрь" "Декабрь"])
  (setq calendar-month-abbrev-array
	["Янв" "Фев" "Мар"
	 "Апр" "Май" "Июн"
	 "Июл" "Авг" "Сен"
	 "Окт" "Ноя" "Дек"])
#+end_src
** Основной буфер при запуске
#+begin_src emacs-lisp
  (setq initial-buffer-choice t)
#+end_src
** Файлы бэкапов, блокировок
#+begin_src emacs-lisp
  (let ((backup-dir (format "%sbackups" (file-name-directory user-init-file))))
    (add-to-list 'backup-directory-alist `("." . ,backup-dir)))
  (setq version-control t)
  (setq delete-old-versions t)
  (setq kept-new-versions 4)
  (setq kept-old-versions 4)
  (global-auto-revert-mode t)
  (setq create-lockfiles nil)
#+end_src
** ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :bind ([remap list-buffers] . ibuffer))
#+end_src
** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ([remap other-window] . ace-window))
#+end_src
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** free-keys
#+begin_src emacs-lisp
  (use-package free-keys)
#+end_src
** discover
#+begin_src 
  (use-package discover)
#+end_src
** auto-package-update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (auto-package-update-maybe))
#+end_src
** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :requires all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
* Elfeed
#+begin_src emacs-lisp
  (setq me/elfeed-cnf-file (expand-file-name ".elfeed.el" user-emacs-directory))
  (when (file-exists-p me/elfeed-cnf-file)
    (setq me/load-elfeed-p t))

  (use-package elfeed
    :if me/load-elfeed-p
    :bind ("C-x w" . elfeed)
    :config
    (when run-on-win-p
      (setq elfeed-use-curl nil))
    (defun elfeed-search-format-date (date)
      (format-time-string "%Y-%m-%d %H:%M" (seconds-to-time date)))
    (setq elfeed-search-title-max-width 100)
    (load-file me/elfeed-cnf-file))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :init
    (setq magit-commit-show-diff nil))
#+end_src
* Org
** Основная настройка
#+begin_src emacs-lisp
  (use-package org
    :preface
    (defun my/org-set-created()
      (interactive)
      (org-set-property
       "CREATED"
       (format-time-string
	"[%Y-%m-%d %a %H:%M]"
	(seconds-to-time (current-time)))))
    (defun my/org-inbox-file-name()
      (file-name-concat org-directory  "inbox.org"))
    (setq org-capture-templates '())
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   :map org-mode-map
	   ("<f6>" . my/org-set-created))
    :config
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "PLANNED(p)" "LATER(l)" "DELEGATED(g@)" "|" "DONE(d!)" "CANCELLED(c@)")))
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-log-reschedule 'time)
    (setq org-hide-leading-stars t)
    (setq org-startup-folded 'content)
    (setq org-adapt-indentation nil)
    (setq org-bookmark-names-plist nil)
    (setq org-export-with-sub-superscripts '{})
    (add-to-list 'org-structure-template-alist '("g" . "src go") t)
    (add-to-list 'org-structure-template-alist '("z" . "src emacs-lisp") t)
    (add-to-list 'org-file-apps '("\\.xlsx?\\'" . default))
    (add-to-list 'org-file-apps '("\\.ods\\'" . default))
    (add-to-list 'org-file-apps '("\\.org_archive\\'" . emacs))
    (add-to-list 'org-export-backends 'md)
    (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
    (setq org-refile-use-outline-path 'file)
    (setq org-directory "~/org/")
    (setq org-agenda-files (list org-directory))
    ;; org-capture-templates
    (add-to-list 'org-capture-templates
		 '("i" "Inbox"
		   entry (file my/org-inbox-file-name)
		   "* TODO %?%(my/org-set-created)"
		   :empty-lines 1))
    (add-to-list 'org-capture-templates
		 '("a" "Timer"
		   entry (file my/org-inbox-file-name)
		   "* TODO %?%(my/org-set-created)"
		   :empty-lines 1 :clock-in t :clock-keep t))
    (add-to-list 'org-capture-templates
		 '("e" "Event"
		   entry (file my/org-inbox-file-name)
		   "* PLANNED %?%(my/org-set-created)\nSCHEDULED: %^T"
		   :empty-lines 1)))

#+end_src
** org-superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :requires org
    :after (org)
    :hook (org-mode . (lambda () (org-superstar-mode 1))))
#+end_src
** org-id
#+begin_src emacs-lisp
  (use-package org-id
    :requires org
    :after (org)
    :ensure nil
    :init
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+end_src
** verb
#+begin_src emacs-lisp
  (use-package verb
    :requires org
    :after (org)
    :config
    (with-eval-after-load 'org
      (define-key org-mode-map (kbd "C-c C-r") verb-command-map)))
#+end_src
* Rclone-org-sync
#+begin_src emacs-lisp
  (defvar rclone-path "" "path to rclone binary")
  (defvar rclone-log-path "" "path to sync log file")
  (defvar rclone-filter-path "" "path to rclone filter path")
  (defvar rclone-local-path "" "path to local directory")
  (defvar rclone-remote-path "" "path to remote directory")
  (defvar rclone-remote-backup "" "path to remote backup directory")
  (defvar rclone-local-backup "" "path to local backup directory")

  (defun rclone-org-upload ()
    "upload org-files to remote via rclone"
    (interactive)
    (shell-command (format "%s sync --filter-from %s --log-file %s --log-level INFO --backup-dir %s %s %s"
			   rclone-path
			   rclone-filter-path
			   rclone-log-path
			   (concat rclone-remote-backup "remote\\" (format-time-string "%Y%m%d_%H%M%S" (current-time)))
			   rclone-local-path
			   rclone-remote-path))
    (message "Upload complete"))

  (defun rclone-org-download ()
    "download org-files from remote via rclone"
    (interactive)
    (shell-command (format "%s sync --filter-from %s --log-file %s --log-level INFO --backup-dir %s %s %s"
			   rclone-path
			   rclone-filter-path
			   rclone-log-path
			   (concat rclone-local-backup (format-time-string "%Y%m%d_%H%M%S" (current-time)))
			   rclone-remote-path
			   rclone-local-path))
    (message "Download complete"))

  (defun rclone-backup-upload ()
    "upload backup files to cloud storage"
    (interactive)
    (elfeed-db-save)
    (shell-command (format "%s move --log-file %s --log-level INFO --delete-empty-src-dirs %s %s"
			   rclone-path
			   rclone-log-path
			   rclone-local-backup
			   (concat rclone-remote-backup (system-name) "\\")
			   ))
    (message "Backup move complete"))

  (defun save-sync-and-quit ()
    (interactive)
    (when (y-or-n-p "Save, sync and exit emacs?")
      (when (org-clocking-buffer)
	(org-clock-out))
      (save-some-buffers t)
      (rclone-org-upload)
      (kill-emacs)))
#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :defer 2
    :bind (("<f9>" . hydra-clock/body))
    :preface
    (defun my/org-clock-in-last-with-prefix-arg ()
      (interactive)
      (setq current-prefix-arg '(4)) ; C-u
      (call-interactively 'org-clock-in-last))
    :config
    (defhydra hydra-clock (:color blue)
      "
      ^
      ^Clock^             ^Do^
      ^─────^─────────────^──^─────────
      _q_ quit            _c_ cancel
      ^^                  _d_ display
      ^^                  _e_ effort
      ^^                  _i_ in
      ^^                  _j_ jump
      ^^                  _o_ out
      ^^                  _r_ report
      ^^                  _l_ continue last
      ^^                  ^^
      "
      ("q" nil)
      ("c" org-clock-cancel :color pink)
      ("d" org-clock-display)
      ("e" org-clock-modify-effort-estimate)
      ("i" org-clock-in)
      ("j" org-clock-goto)
      ("o" org-clock-out)
      ("r" org-clock-report)
      ("l" my/org-clock-in-last-with-prefix-arg)))
#+end_src
* Программирование
** Общие
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda()
			      (toggle-truncate-lines 1)
			      (display-line-numbers-mode 1)
			      (hs-minor-mode)))
  (electric-pair-mode 1)
#+end_src
** rainbow-delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** company
#+begin_src emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode))
#+end_src
** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode))
#+end_src
** json
#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src
* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-items '((recents  . 5)
			    (bookmarks . 5)
			    (registers . 5)
			    (projects . 5)))
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)

    ;; add navigator
    (setq dashboard-set-navigator t)

    ;; Format: "(icon title help action face prefix suffix)"
    (setq dashboard-navigator-buttons
	  `(
	    ;; org-agenda
	    ((,(all-the-icons-faicon "calendar" :height 1.1 :v-adjust 0.0)
	      "Agenda"
	      ""
	      (lambda (&rest _) (org-agenda-list))))))

    (when load-mastodon
      (add-to-list 'dashboard-navigator-buttons
		   `((,(all-the-icons-faicon "comments-o" :height 1.1 :v-adjust 0.0)
		      "Mastodon"
		      ""
		      (lambda (&rest _) (mastodon)))) t))

    (when me/load-elfeed-p
      (add-to-list 'dashboard-navigator-buttons
		   `((,(all-the-icons-faicon "rss" :height 1.1 :v-adjust 0.0)
		      "Elfeed"
		      ""
		      (lambda (&rest _) (elfeed)))) t))

    (when load-rclone-org
      (add-to-list 'dashboard-navigator-buttons
		   `((,(all-the-icons-faicon "download" :height 1.1 :v-adjust 0.0)
		      "ROD"
		      "rclone-org-download"
		      (lambda (&rest _) (rclone-org-download)))
		     (,(all-the-icons-faicon "upload" :height 1.1 :v-adjust 0.0)
		      "ROU"
		      "rclone-org-upload"
		      (lambda (&rest _) (rclone-org-upload)))) t))

    (dashboard-setup-startup-hook))
#+end_src
* custom.el
Отдельный файл для настроек
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (ignore-errors (load custom-file))
#+end_src
* secret.el
#+begin_src emacs-lisp
  (me/load-config-file ".secret")
#+end_src
